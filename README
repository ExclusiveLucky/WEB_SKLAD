# WEB_SKLAD - Система управления складом

## Описание проекта

WEB_SKLAD — это веб-приложение для управления складом, предоставляющее возможность администрирования товаров, учета продаж, управления сменами сотрудников и выполнения задач. Приложение использует FastAPI для обработки запросов, SQLite в качестве базы данных, и Jinja2 для рендеринга страниц.

## Структура проекта
WEB_SKLAD/
│
├── app/
│   ├── __init__.py       # Инициализация пакета приложения
│   ├── main.py           # Основной файл FastAPI приложения
│   ├── models.py         # Модели базы данных
│   ├── middleware.py     # Проверка авторизации
│   ├── database.py       # Конфигурация подключения к базе данных
│   ├── SKLAD.db          # База данных
│   ├── routes/
│   │   ├── __init__.py          # Инициализация пакета маршрутов
│   │   ├── auth.py              # Маршруты для авторизации и регистрации
│   │   ├── categories.py        # Маршруты для работы с категориями и продуктами
│   │   ├── admin.py             # Маршруты для администрирования
│   │   ├── tasks_workshifts.py  # Маршруты для работы с задачами и сменами
│   │   ├── dependencies.py      # Общие зависимости
│   ├── templates/
│   │   ├── base.html            # Базовый HTML шаблон
│   │   ├── login.html           # Страница логина
│   │   ├── register.html        # Страница регистрации
│   │   ├── categories.html      # Страница категорий
│   │   ├── products.html        # Страница продуктов
│   │   ├── sales.html           # Страница продаж
│   │   ├── tasks.html           # Страница задач
│   │   ├── admin.html           # Страница админ-панели
│
├── static/
│   ├── css/
│   │   ├── base.css             # Основные стили для всего приложения
│   │   ├── layout.css           # Стили для общей структуры страниц
│   │   ├── buttons.css          # Стили кнопок
│   │   ├── forms.css            # Стили форм
│   │   ├── modals.css           # Стили попапов
│   │   ├── notifications.css    # Стили уведомлений
│   │   ├── tables.css           # Стили для таблиц
│
├── requirements.txt      # Список зависимостей проекта


## Функционал приложения

### Авторизация и регистрация
- **Авторизация**: Пользователи могут войти в систему через страницу логина.
- **Регистрация**: Новые пользователи могут зарегистрироваться через отдельную страницу регистрации.

### Управление категориями и продуктами
- Просмотр категорий товаров и их товаров.
- Возможность отметить товар как проданный с учетом количества.

### Администрирование
- Панель администратора предоставляет доступ к продажам за день и к задачам пользователей.
- Возможность просматривать задачи сотрудников и управлять сменами.

### Учет задач и смен
- **Задачи**: Пользователи могут просматривать свои задачи, администратор видит все задачи.
- **Смены**: Сотрудники могут начинать смену через интерфейс.

### База данных
- В проекте используется SQLite база данных (`SKLAD.db`).
- Модели включают пользователей, продукты, продажи, задачи и смены.

## Установка и настройка

### 1. Клонирование репозитория

git clone https://github.com/yourusername/WEB_SKLAD.git
cd WEB_SKLAD

2. Установка зависимостей

Создайте виртуальную среду и активируйте ее:
python -m venv venv
source venv/bin/activate  # Для Windows используйте `venv\Scripts\activate`

Затем установите зависимости:
pip install -r requirements.txt

3. Настройка базы данных

База данных уже настроена как SQLite файл (SKLAD.db). Если необходимо создать новую базу данных, вы можете настроить её следующим образом:
python app/database.py

4. Запуск приложения

Для запуска приложения используйте команду:
uvicorn app.main:app --reload

Приложение будет доступно по адресу: http://127.0.0.1:8000/
Структура моделей
Пользователи (User)

    Логин, пароль, имя, фамилия, номер телефона, дата рождения.
    Статус работы (работает/не работает).

Категории (Category) и товары (Product)

    Категории включают товары, которые можно отметить как проданные.

Продажи (Sale)

    Хранит данные о пользователе, товаре, количестве и времени продажи.

Задачи (Task)

    Пользовательские задачи, которые могут быть выполнены или невыполнены.

Смены (WorkShift)

    Фиксирует начало и конец смены пользователя.

Стилизация

Стили проекта разделены на несколько файлов CSS для более удобного управления:

    base.css: Базовые стили для всего приложения.
    layout.css: Стили для структурных элементов страницы.
    buttons.css: Стили кнопок.
    forms.css: Стили для форм авторизации, регистрации и других форм.
    modals.css: Стили для модальных окон.
    notifications.css: Стили для уведомлений.
    tables.css: Стили для таблиц с данными.

Зависимости

Основные библиотеки, используемые в проекте:

    FastAPI: Фреймворк для построения веб-приложений.
    SQLAlchemy: ORM для работы с базой данных.
    Jinja2: Шаблонизатор для рендеринга HTML страниц.
    Uvicorn: ASGI сервер для запуска приложения.

Лицензия

Проект находится под лицензией MIT. Подробности можно найти в файле LICENSE.
